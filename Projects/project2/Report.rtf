{\rtf1\ansi\ansicpg1252\cocoartf1671\cocoasubrtf200
{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\fnil\fcharset0 Menlo-Regular;\f2\fnil\fcharset0 Menlo-Italic;
}
{\colortbl;\red255\green255\blue255;\red255\green255\blue255;\red255\green255\blue255;\red108\green121\blue134;
\red145\green212\blue98;\red252\green142\blue62;\red174\green243\blue124;\red150\green135\blue245;\red252\green106\blue93;
\red122\green201\blue182;\red153\green232\blue213;}
{\*\expandedcolortbl;;\cssrgb\c100000\c100000\c100000\c0;\cssrgb\c100000\c100000\c99985;\cssrgb\c49893\c55000\c59643;
\cssrgb\c62673\c85012\c45691;\cssrgb\c99869\c62951\c30670;\cssrgb\c72881\c94829\c55887;\cssrgb\c65723\c61826\c97043;\cssrgb\c99989\c50533\c43741;
\cssrgb\c54125\c81986\c76422;\cssrgb\c65494\c92179\c86599;}
\margl1440\margr1440\vieww14320\viewh13940\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs24 \cf0 \cb2 Report\
\
My doubly linked list contains nodes which have 3 elements, their data, a pointer to the next node, and a pointer to the previous node.  The first node\'92s previous pointer and the last node\'92s next pointer are both NULL.  The head points at the first node, and a tail pointer points at the last.  In the case of the empty set, both of these are set to NULL.  There is no dummy node, and as previously mentioned, this list is not circular.  The nodes are stored in order of increasing size according to the > operator; the first data will be <= the second, and so on.\
\
\
Empty Set:\
\
m_size = 0\
\
head: 			\cb2 tail:\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 \cb2 \'97\'97\'97\'97		\'97\'97\'97\'97\
| nullptr  |		| nullptr  |\
\'97\'97\'97\'97		\'97\'97\'97\'97\cb2 \
\cb2 \
\
Standard Set:\
\
m_size = 3\
\cb2 \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 \cb2 m_head \'97>  \'97\'97\'97\'97   	     \cb2 \'97\'97\'97\'97\cb2   		 \cb2 \'97\'97\'97\'97  <\'97 m_tail\cb2 \
		|  data1  |            \cb2 |   data2  |		 |   data3  |\cb2 \
		\'97\'97\'97\'97	     \cb2 \'97\'97\'97\'97\cb2 		\cb2  \'97\'97\'97\'97\cb2 \
<next>	|      *     |    \'97>   |      *     |	\cb2   \'97>\cb2 	 \cb2 | nullptr  |\cb2 \
		\'97\'97\'97\'97	     \cb2 \'97\'97\'97\'97 		 \'97\'97\'97\'97\cb2 \
<prev>	| nullptr  |   <\'97    |      *     | 	  <\'97 	\cb2  |      *     |\cb2 \
		\'97\'97\'97\'97	     \cb2 \'97\'97\'97\'97		 \'97\'97\'97\'97\
\
//data1 <= data2 <= data2\
\
Subtract(s1, s2, result):\
result = s1;\
for (data) elements in s2\
erase (data) from result //erase simply returns if not found\
\
Unite(s1, s2, result):\
result = s1\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 \cb2 for (data) elements in s2\
unite (data) with result //unite simply returns if (data) already present\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 \cb2 \
\
Test Cases: //as code: commented out sections allow printing in case of failed tests\
\pard\tx593\pardeftab593\pardirnatural\partightenfactor0

\f1 \cf3 \cb2  
\f2\i \cf4 \cb2 // ItemType is std::string
\f0\i0 \cf0 \cb2 \

\f1 \cf3 \cb2     
\f0 \cf0 \cb2 \

\f1 \cf3 \cb2     
\f2\i \cf4 \cb2 // empty tests
\f0\i0 \cf0 \cb2 \

\f1 \cf3 \cb2     \cf5 \cb2 Set\cf3 \cb2  ss;
\f0 \cf0 \cb2 \

\f1 \cf3 \cb2     \cf6 \cb2 assert\cf3 \cb2 (ss.\cf7 \cb2 size\cf3 \cb2 () == \cf8 \cb2 0\cf3 \cb2 );                 
\f2\i \cf4 \cb2 // test size
\f0\i0 \cf0 \cb2 \

\f1 \cf3 \cb2     \cf6 \cb2 assert\cf3 \cb2 (ss.\cf7 \cb2 empty\cf3 \cb2 ());                     
\f2\i \cf4 \cb2 // test empty
\f0\i0 \cf0 \cb2 \

\f1 \cf3 \cb2     \cf6 \cb2 assert\cf3 \cb2 (!ss.\cf7 \cb2 erase\cf3 \cb2 (\cf9 \cb2 "roti"\cf3 \cb2 ));              
\f2\i \cf4 \cb2 // nothing to remove
\f0\i0 \cf0 \cb2 \

\f1 \cf3 \cb2     \cf6 \cb2 assert\cf3 \cb2 (ss.\cf7 \cb2 insert\cf3 \cb2 (\cf9 \cb2 "temp"\cf3 \cb2 )
\f0 \cf0 \cb2 \

\f1 \cf3 \cb2            && ss.\cf7 \cb2 erase\cf3 \cb2 (\cf9 \cb2 "temp"\cf3 \cb2 ));
\f0 \cf0 \cb2 \

\f1 \cf3 \cb2     \cf10 \cb2 std\cf3 \cb2 ::\cf10 \cb2 cerr\cf3 \cb2  << \cf9 \cb2 "Empty Tests Passed."\cf3 \cb2  << \cf10 \cb2 std\cf3 \cb2 ::\cf11 \cb2 endl\cf3 \cb2 ;
\f0 \cf0 \cb2 \

\f1 \cf3 \cb2     
\f2\i \cf4 \cb2 //      << "Printing Sets:\\n" << std::endl;
\f0\i0 \cf0 \cb2 \

\f1 \cf3 \cb2     
\f2\i \cf4 \cb2 //    std::cerr << "Set ss: "; ss.dump();
\f0\i0 \cf0 \cb2 \

\f1 \cf3 \cb2     
\f2\i \cf4 \cb2 //    std::cerr << std::string(20,'-') << std::endl;
\f0\i0 \cf0 \cb2 \

\f1 \cf3 \cb2     
\f0 \cf0 \cb2 \

\f1 \cf3 \cb2     
\f2\i \cf4 \cb2 //standard tests
\f0\i0 \cf0 \cb2 \

\f1 \cf3 \cb2     \cf5 \cb2 Set\cf3 \cb2  s;
\f0 \cf0 \cb2 \

\f1 \cf3 \cb2     s.\cf7 \cb2 insert\cf3 \cb2 (\cf9 \cb2 "ccc"\cf3 \cb2 );
\f0 \cf0 \cb2 \

\f1 \cf3 \cb2     s.\cf7 \cb2 insert\cf3 \cb2 (\cf9 \cb2 "aaa"\cf3 \cb2 );
\f0 \cf0 \cb2 \

\f1 \cf3 \cb2     s.\cf7 \cb2 insert\cf3 \cb2 (\cf9 \cb2 "bbb"\cf3 \cb2 );
\f0 \cf0 \cb2 \

\f1 \cf3 \cb2     \cf5 \cb2 ItemType\cf3 \cb2  x = \cf9 \cb2 "xxx"\cf3 \cb2 ;
\f0 \cf0 \cb2 \

\f1 \cf3 \cb2     \cf6 \cb2 assert\cf3 \cb2 (!s.\cf7 \cb2 get\cf3 \cb2 (\cf8 \cb2 3\cf3 \cb2 , x)  &&  x == \cf9 \cb2 "xxx"\cf3 \cb2 );       
\f2\i \cf4 \cb2 // x is unchanged
\f0\i0 \cf0 \cb2 \

\f1 \cf3 \cb2     \cf6 \cb2 assert\cf3 \cb2 (s.\cf7 \cb2 get\cf3 \cb2 (\cf8 \cb2 1\cf3 \cb2 , x) &&  x == \cf9 \cb2 "bbb"\cf3 \cb2 );         
\f2\i \cf4 \cb2 // "bbb" is greater than 1 item
\f0\i0 \cf0 \cb2 \

\f1 \cf3 \cb2     \cf10 \cb2 std\cf3 \cb2 ::\cf10 \cb2 cerr\cf3 \cb2  << \cf9 \cb2 "Standard Tests Passed."\cf3 \cb2  << \cf10 \cb2 std\cf3 \cb2 ::\cf11 \cb2 endl\cf3 \cb2 ;
\f0 \cf0 \cb2 \

\f1 \cf3 \cb2     
\f2\i \cf4 \cb2 //      << "Printing Sets:\\n" << std::endl;;
\f0\i0 \cf0 \cb2 \

\f1 \cf3 \cb2     
\f2\i \cf4 \cb2 //    std::cerr << "Set s: "; s.dump();
\f0\i0 \cf0 \cb2 \

\f1 \cf3 \cb2     
\f2\i \cf4 \cb2 //    std::cerr << std::string(20,'-') << std::endl;
\f0\i0 \cf0 \cb2 \

\f1 \cf3 \cb2     
\f0 \cf0 \cb2 \

\f1 \cf3 \cb2     
\f2\i \cf4 \cb2 //swap function
\f0\i0 \cf0 \cb2 \

\f1 \cf3 \cb2     \cf5 \cb2 Set\cf3 \cb2  t;
\f0 \cf0 \cb2 \

\f1 \cf3 \cb2     t.\cf7 \cb2 swap\cf3 \cb2 (s);
\f0 \cf0 \cb2 \

\f1 \cf3 \cb2     \cf6 \cb2 assert\cf3 \cb2 (s.\cf7 \cb2 size\cf3 \cb2 () == \cf8 \cb2 0\cf3 \cb2 );                          
\f2\i \cf4 \cb2 // test size
\f0\i0 \cf0 \cb2 \

\f1 \cf3 \cb2     \cf6 \cb2 assert\cf3 \cb2 (s.\cf7 \cb2 empty\cf3 \cb2 ());                              
\f2\i \cf4 \cb2 // test empty
\f0\i0 \cf0 \cb2 \

\f1 \cf3 \cb2     \cf6 \cb2 assert\cf3 \cb2 (!s.\cf7 \cb2 contains\cf3 \cb2 (\cf9 \cb2 "ccc"\cf3 \cb2 ));                     
\f2\i \cf4 \cb2 // t emptied
\f0\i0 \cf0 \cb2 \

\f1 \cf3 \cb2     x = \cf9 \cb2 "xxx"\cf3 \cb2 ;
\f0 \cf0 \cb2 \

\f1 \cf3 \cb2     \cf6 \cb2 assert\cf3 \cb2 (!t.\cf7 \cb2 get\cf3 \cb2 (\cf8 \cb2 3\cf3 \cb2 , x)  &&  x == \cf9 \cb2 "xxx"\cf3 \cb2 );           
\f2\i \cf4 \cb2 // x is unchanged
\f0\i0 \cf0 \cb2 \

\f1 \cf3 \cb2     \cf6 \cb2 assert\cf3 \cb2 (t.\cf7 \cb2 get\cf3 \cb2 (\cf8 \cb2 1\cf3 \cb2 , x) &&  x == \cf9 \cb2 "bbb"\cf3 \cb2 );             
\f2\i \cf4 \cb2 // "bbb" is greater than 1 item
\f0\i0 \cf0 \cb2 \

\f1 \cf3 \cb2     \cf10 \cb2 std\cf3 \cb2 ::\cf10 \cb2 cerr\cf3 \cb2  << \cf9 \cb2 "Swap Tests Passed."\cf3 \cb2  << \cf10 \cb2 std\cf3 \cb2 ::\cf11 \cb2 endl\cf3 \cb2 ;
\f0 \cf0 \cb2 \

\f1 \cf3 \cb2     
\f2\i \cf4 \cb2 //      << "Printing Sets:\\n" << std::endl;
\f0\i0 \cf0 \cb2 \

\f1 \cf3 \cb2     
\f2\i \cf4 \cb2 //    std::cerr << "Set s: "; s.dump();
\f0\i0 \cf0 \cb2 \

\f1 \cf3 \cb2     
\f2\i \cf4 \cb2 //    std::cerr << "Set t: "; t.dump();
\f0\i0 \cf0 \cb2 \

\f1 \cf3 \cb2     
\f2\i \cf4 \cb2 //    std::cerr << std::string(20,'-') << std::endl;
\f0\i0 \cf0 \cb2 \

\f1 \cf3 \cb2     
\f0 \cf0 \cb2 \

\f1 \cf3 \cb2     
\f2\i \cf4 \cb2 //copy constructor
\f0\i0 \cf0 \cb2 \

\f1 \cf3 \cb2     \cf5 \cb2 Set\cf3 \cb2  tt(t);
\f0 \cf0 \cb2 \

\f1 \cf3 \cb2     x = \cf9 \cb2 "xxx"\cf3 \cb2 ;
\f0 \cf0 \cb2 \

\f1 \cf3 \cb2     \cf6 \cb2 assert\cf3 \cb2 (!tt.\cf7 \cb2 get\cf3 \cb2 (\cf8 \cb2 3\cf3 \cb2 , x)  &&  x == \cf9 \cb2 "xxx"\cf3 \cb2 );         
\f2\i \cf4 \cb2 // x is unchanged
\f0\i0 \cf0 \cb2 \

\f1 \cf3 \cb2     \cf6 \cb2 assert\cf3 \cb2 (tt.\cf7 \cb2 get\cf3 \cb2 (\cf8 \cb2 1\cf3 \cb2 , x) &&  x == \cf9 \cb2 "bbb"\cf3 \cb2 );           
\f2\i \cf4 \cb2 // "bbb" is greater than 1 item
\f0\i0 \cf0 \cb2 \

\f1 \cf3 \cb2     \cf10 \cb2 std\cf3 \cb2 ::\cf10 \cb2 cerr\cf3 \cb2  << \cf9 \cb2 "Copy Tests Passed."\cf3 \cb2  << \cf10 \cb2 std\cf3 \cb2 ::\cf11 \cb2 endl\cf3 \cb2 ;
\f0 \cf0 \cb2 \

\f1 \cf3 \cb2     
\f2\i \cf4 \cb2 //       << "Printing Sets:" << std::endl;
\f0\i0 \cf0 \cb2 \

\f1 \cf3 \cb2     
\f2\i \cf4 \cb2 //    std::cerr << "Set tt: "; tt.dump();
\f0\i0 \cf0 \cb2 \

\f1 \cf3 \cb2     
\f2\i \cf4 \cb2 //    std::cerr << "Set t: "; t.dump();
\f0\i0 \cf0 \cb2 \

\f1 \cf3 \cb2     
\f2\i \cf4 \cb2 //    std::cerr << std::string(20,'-') << std::endl;
\f0\i0 \cf0 \cb2 \

\f1 \cf3 \cb2     
\f0 \cf0 \cb2 \

\f1 \cf3 \cb2     
\f2\i \cf4 \cb2 //assignment operator
\f0\i0 \cf0 \cb2 \

\f1 \cf3 \cb2     tt = ss;
\f0 \cf0 \cb2 \

\f1 \cf3 \cb2     \cf6 \cb2 assert\cf3 \cb2 (tt.\cf7 \cb2 size\cf3 \cb2 () == \cf8 \cb2 0\cf3 \cb2 );                        
\f2\i \cf4 \cb2 // test size
\f0\i0 \cf0 \cb2 \

\f1 \cf3 \cb2     \cf6 \cb2 assert\cf3 \cb2 (tt.\cf7 \cb2 empty\cf3 \cb2 ());                            
\f2\i \cf4 \cb2 // test empty
\f0\i0 \cf0 \cb2 \

\f1 \cf3 \cb2     \cf6 \cb2 assert\cf3 \cb2 (!tt.\cf7 \cb2 contains\cf3 \cb2 (\cf9 \cb2 ""\cf3 \cb2 ));                      
\f2\i \cf4 \cb2 // tt emptied
\f0\i0 \cf0 \cb2 \

\f1 \cf3 \cb2     \cf10 \cb2 std\cf3 \cb2 ::\cf10 \cb2 cerr\cf3 \cb2  << \cf9 \cb2 "Assignment Tests Passed."\cf3 \cb2  << \cf10 \cb2 std\cf3 \cb2 ::\cf11 \cb2 endl\cf3 \cb2 ;
\f0 \cf0 \cb2 \

\f1 \cf3 \cb2     
\f2\i \cf4 \cb2 //       << "Printing Sets:\\n" << std::endl;
\f0\i0 \cf0 \cb2 \

\f1 \cf3 \cb2     
\f2\i \cf4 \cb2 //    std::cerr << "Set tt: "; tt.dump();
\f0\i0 \cf0 \cb2 \

\f1 \cf3 \cb2     
\f2\i \cf4 \cb2 //    std::cerr << "Set ss: ";   ss.dump();
\f0\i0 \cf0 \cb2 \

\f1 \cf3 \cb2     
\f2\i \cf4 \cb2 //    std::cerr << "Set t: "; t.dump();
\f0\i0 \cf0 \cb2 \

\f1 \cf3 \cb2     
\f2\i \cf4 \cb2 //    std::cerr << "Set s: "; s.dump();
\f0\i0 \cf0 \cb2 \

\f1 \cf3 \cb2     
\f2\i \cf4 \cb2 //    std::cerr << std::string(20,'-') << std::endl;
\f0\i0 \cf0 \cb2 \

\f1 \cf3 \cb2     
\f0 \cf0 \cb2 \

\f1 \cf3 \cb2     
\f2\i \cf4 \cb2 //subtract
\f0\i0 \cf0 \cb2 \

\f1 \cf3 \cb2     \cf5 \cb2 Set\cf3 \cb2  a;
\f0 \cf0 \cb2 \

\f1 \cf3 \cb2     \cf6 \cb2 assert\cf3 \cb2 (a.\cf7 \cb2 insert\cf3 \cb2 (\cf9 \cb2 "alpha"\cf3 \cb2 )
\f0 \cf0 \cb2 \

\f1 \cf3 \cb2            && a.\cf7 \cb2 insert\cf3 \cb2 (\cf9 \cb2 "beta"\cf3 \cb2 ));                    
\f2\i \cf4 \cb2 //a == alpha,beta
\f0\i0 \cf0 \cb2 \

\f1 \cf3 \cb2     \cf5 \cb2 Set\cf3 \cb2  b = a;
\f0 \cf0 \cb2 \

\f1 \cf3 \cb2     \cf6 \cb2 assert\cf3 \cb2 (b.\cf7 \cb2 erase\cf3 \cb2 (\cf9 \cb2 "alpha"\cf3 \cb2 )
\f0 \cf0 \cb2 \

\f1 \cf3 \cb2            && b.\cf7 \cb2 contains\cf3 \cb2 (\cf9 \cb2 "beta"\cf3 \cb2 )
\f0 \cf0 \cb2 \

\f1 \cf3 \cb2            && !b.\cf7 \cb2 contains\cf3 \cb2 (\cf9 \cb2 "alpha"\cf3 \cb2 ));                
\f2\i \cf4 \cb2 //b = beta
\f0\i0 \cf0 \cb2 \

\f1 \cf3 \cb2     \cf5 \cb2 Set\cf3 \cb2  result;
\f0 \cf0 \cb2 \

\f1 \cf3 \cb2     \cf7 \cb2 subtract\cf3 \cb2 (a, b, result);                         
\f2\i \cf4 \cb2 //a-b = alpha
\f0\i0 \cf0 \cb2 \

\f1 \cf3 \cb2     \cf6 \cb2 assert\cf3 \cb2 (!result.\cf7 \cb2 contains\cf3 \cb2 (\cf9 \cb2 "beta"\cf3 \cb2 )
\f0 \cf0 \cb2 \

\f1 \cf3 \cb2            && result.\cf7 \cb2 contains\cf3 \cb2 (\cf9 \cb2 "alpha"\cf3 \cb2 ));
\f0 \cf0 \cb2 \

\f1 \cf3 \cb2     \cf10 \cb2 std\cf3 \cb2 ::\cf10 \cb2 cerr\cf3 \cb2  << \cf9 \cb2 "Subtract Tests Passed."\cf3 \cb2  << \cf10 \cb2 std\cf3 \cb2 ::\cf11 \cb2 endl\cf3 \cb2 ;
\f0 \cf0 \cb2 \

\f1 \cf3 \cb2     
\f2\i \cf4 \cb2 //       << "Printing Sets:\\n" << std::endl;
\f0\i0 \cf0 \cb2 \

\f1 \cf3 \cb2     
\f2\i \cf4 \cb2 //    std::cerr << "Set a: "; a.dump();
\f0\i0 \cf0 \cb2 \

\f1 \cf3 \cb2     
\f2\i \cf4 \cb2 //    std::cerr << "Set b: ";   b.dump();
\f0\i0 \cf0 \cb2 \

\f1 \cf3 \cb2     
\f2\i \cf4 \cb2 //    std::cerr << std::string(20,'-') << std::endl;
\f0\i0 \cf0 \cb2 \
\

\f1 \cf3 \cb2     
\f2\i \cf4 \cb2 //unite
\f0\i0 \cf0 \cb2 \

\f1 \cf3 \cb2     \cf5 \cb2 Set\cf3 \cb2  c;
\f0 \cf0 \cb2 \

\f1 \cf3 \cb2     \cf6 \cb2 assert\cf3 \cb2 (c.\cf7 \cb2 insert\cf3 \cb2 (\cf9 \cb2 "beta"\cf3 \cb2 )
\f0 \cf0 \cb2 \

\f1 \cf3 \cb2            && c.\cf7 \cb2 insert\cf3 \cb2 (\cf9 \cb2 "delta"\cf3 \cb2 ));                   
\f2\i \cf4 \cb2 //c=beta, delta
\f0\i0 \cf0 \cb2 \

\f1 \cf3 \cb2     \cf5 \cb2 Set\cf3 \cb2  d = c;
\f0 \cf0 \cb2 \

\f1 \cf3 \cb2     \cf6 \cb2 assert\cf3 \cb2 (d.\cf7 \cb2 erase\cf3 \cb2 (\cf9 \cb2 "delta"\cf3 \cb2 )
\f0 \cf0 \cb2 \

\f1 \cf3 \cb2            && d.\cf7 \cb2 insert\cf3 \cb2 (\cf9 \cb2 "charlie"\cf3 \cb2 ));
\f0 \cf0 \cb2 \

\f1 \cf3 \cb2     \cf6 \cb2 assert\cf3 \cb2 (d.\cf7 \cb2 contains\cf3 \cb2 (\cf9 \cb2 "beta"\cf3 \cb2 )
\f0 \cf0 \cb2 \

\f1 \cf3 \cb2            && !d.\cf7 \cb2 contains\cf3 \cb2 (\cf9 \cb2 "delta"\cf3 \cb2 ));                
\f2\i \cf4 \cb2 //d=charlie, beta
\f0\i0 \cf0 \cb2 \

\f1 \cf3 \cb2     \cf7 \cb2 unite\cf3 \cb2 (c, d, result);                            
\f2\i \cf4 \cb2 //c+d = beta, charlie, delta
\f0\i0 \cf0 \cb2 \

\f1 \cf3 \cb2     \cf6 \cb2 assert\cf3 \cb2 (result.\cf7 \cb2 contains\cf3 \cb2 (\cf9 \cb2 "beta"\cf3 \cb2 )
\f0 \cf0 \cb2 \

\f1 \cf3 \cb2            && result.\cf7 \cb2 contains\cf3 \cb2 (\cf9 \cb2 "delta"\cf3 \cb2 )
\f0 \cf0 \cb2 \

\f1 \cf3 \cb2            && result.\cf7 \cb2 contains\cf3 \cb2 (\cf9 \cb2 "charlie"\cf3 \cb2 )
\f0 \cf0 \cb2 \

\f1 \cf3 \cb2            && !result.\cf7 \cb2 contains\cf3 \cb2 (\cf9 \cb2 "alpha"\cf3 \cb2 ));
\f0 \cf0 \cb2 \

\f1 \cf3 \cb2     \cf10 \cb2 std\cf3 \cb2 ::\cf10 \cb2 cerr\cf3 \cb2  << \cf9 \cb2 "Unite Tests Passed."\cf3 \cb2  << \cf10 \cb2 std\cf3 \cb2 ::\cf11 \cb2 endl\cf3 \cb2 ;
\f0 \cf0 \cb2 \

\f1 \cf3 \cb2     
\f2\i \cf4 \cb2 //       << "Printing Sets:\\n" << std::endl;
\f0\i0 \cf0 \cb2 \

\f1 \cf3 \cb2     
\f2\i \cf4 \cb2 //    std::cerr << "Set c: "; c.dump();
\f0\i0 \cf0 \cb2 \

\f1 \cf3 \cb2     
\f2\i \cf4 \cb2 //    std::cerr << "Set d: ";   d.dump();
\f0\i0 \cf0 \cb2 \

\f1 \cf3 \cb2     
\f2\i \cf4 \cb2 //    std::cerr << std::string(20,'-') << std::endl;
\f0\i0 \cf0 \cb2 \

\f1 \cf3 \cb2     
\f0 \cf0 \cb2 \

\f1 \cf3 \cb2     
\f2\i \cf4 \cb2 //edge cases for unite
\f0\i0 \cf0 \cb2 \

\f1 \cf3 \cb2     \cf5 \cb2 Set\cf3 \cb2  e;
\f0 \cf0 \cb2 \

\f1 \cf3 \cb2     \cf5 \cb2 Set\cf3 \cb2  f = a;
\f0 \cf0 \cb2 \

\f1 \cf3 \cb2     \cf7 \cb2 unite\cf3 \cb2 (e, f, result);                            
\f2\i \cf4 \cb2 //test empty s1
\f0\i0 \cf0 \cb2 \

\f1 \cf3 \cb2     \cf6 \cb2 assert\cf3 \cb2 (result.\cf7 \cb2 contains\cf3 \cb2 (\cf9 \cb2 "alpha"\cf3 \cb2 )
\f0 \cf0 \cb2 \

\f1 \cf3 \cb2            && result.\cf7 \cb2 contains\cf3 \cb2 (\cf9 \cb2 "beta"\cf3 \cb2 ));             
\f2\i \cf4 \cb2 // e + f = alpha,beta
\f0\i0 \cf0 \cb2 \

\f1 \cf3 \cb2     result = tt;                                    
\f2\i \cf4 \cb2 //set to empty
\f0\i0 \cf0 \cb2 \

\f1 \cf3 \cb2     \cf7 \cb2 unite\cf3 \cb2 (f, e, result);                            
\f2\i \cf4 \cb2 //test empty s2
\f0\i0 \cf0 \cb2 \

\f1 \cf3 \cb2     \cf6 \cb2 assert\cf3 \cb2 (result.\cf7 \cb2 contains\cf3 \cb2 (\cf9 \cb2 "alpha"\cf3 \cb2 )
\f0 \cf0 \cb2 \

\f1 \cf3 \cb2            && result.\cf7 \cb2 contains\cf3 \cb2 (\cf9 \cb2 "beta"\cf3 \cb2 ));             
\f2\i \cf4 \cb2 // e + f = alpha,beta
\f0\i0 \cf0 \cb2 \

\f1 \cf3 \cb2     \cf10 \cb2 std\cf3 \cb2 ::\cf10 \cb2 cerr\cf3 \cb2  << \cf9 \cb2 "Unite Edge Tests Passed."\cf3 \cb2  << \cf10 \cb2 std\cf3 \cb2 ::\cf11 \cb2 endl\cf3 \cb2 ;
\f0 \cf0 \cb2 \

\f1 \cf3 \cb2     
\f2\i \cf4 \cb2 //       << "Printing Sets:\\n" << std::endl;
\f0\i0 \cf0 \cb2 \

\f1 \cf3 \cb2     
\f2\i \cf4 \cb2 //    std::cerr << "Set e: "; e.dump();
\f0\i0 \cf0 \cb2 \

\f1 \cf3 \cb2     
\f2\i \cf4 \cb2 //    std::cerr << "Set f: "; f.dump();
\f0\i0 \cf0 \cb2 \

\f1 \cf3 \cb2     
\f2\i \cf4 \cb2 //    std::cerr << std::string(20,'-') << std::endl;
\f0\i0 \cf0 \cb2 \
\

\f1 \cf3 \cb2     
\f2\i \cf4 \cb2 //edge cases for unite
\f0\i0 \cf0 \cb2 \

\f1 \cf3 \cb2     \cf5 \cb2 Set\cf3 \cb2  g;
\f0 \cf0 \cb2 \

\f1 \cf3 \cb2     \cf5 \cb2 Set\cf3 \cb2  h = a;
\f0 \cf0 \cb2 \

\f1 \cf3 \cb2     \cf7 \cb2 subtract\cf3 \cb2 (g, h, result);                            
\f2\i \cf4 \cb2 //test empty s1
\f0\i0 \cf0 \cb2 \

\f1 \cf3 \cb2     \cf6 \cb2 assert\cf3 \cb2 (!result.\cf7 \cb2 contains\cf3 \cb2 (\cf9 \cb2 "alpha"\cf3 \cb2 )
\f0 \cf0 \cb2 \

\f1 \cf3 \cb2            && !result.\cf7 \cb2 contains\cf3 \cb2 (\cf9 \cb2 "beta"\cf3 \cb2 ));             
\f2\i \cf4 \cb2 // e + f = alpha,beta
\f0\i0 \cf0 \cb2 \

\f1 \cf3 \cb2     result = tt;                                     
\f2\i \cf4 \cb2 //set to empty
\f0\i0 \cf0 \cb2 \

\f1 \cf3 \cb2     \cf7 \cb2 subtract\cf3 \cb2 (h, g, result);                          
\f2\i \cf4 \cb2 //test empty s2
\f0\i0 \cf0 \cb2 \

\f1 \cf3 \cb2     \cf6 \cb2 assert\cf3 \cb2 (result.\cf7 \cb2 contains\cf3 \cb2 (\cf9 \cb2 "alpha"\cf3 \cb2 )
\f0 \cf0 \cb2 \

\f1 \cf3 \cb2            && result.\cf7 \cb2 contains\cf3 \cb2 (\cf9 \cb2 "beta"\cf3 \cb2 ));              
\f2\i \cf4 \cb2 // e + f = alpha,beta
\f0\i0 \cf0 \cb2 \

\f1 \cf3 \cb2     \cf10 \cb2 std\cf3 \cb2 ::\cf10 \cb2 cerr\cf3 \cb2  << \cf9 \cb2 "Subtract Edge Tests Passed."\cf3 \cb2  << \cf10 \cb2 std\cf3 \cb2 ::\cf11 \cb2 endl\cf3 \cb2 ;
\f0 \cf0 \cb2 \

\f1 \cf3 \cb2     
\f2\i \cf4 \cb2 //       << "Printing Sets:\\n" << std::endl;
\f0\i0 \cf0 \cb2 \

\f1 \cf3 \cb2     
\f2\i \cf4 \cb2 //    std::cerr << "Set g: "; g.dump();
\f0\i0 \cf0 \cb2 \

\f1 \cf3 \cb2     
\f2\i \cf4 \cb2 //    std::cerr << "Set h: "; h.dump();
\f0\i0 \cf0 \cb2 \

\f1 \cf3 \cb2     
\f2\i \cf4 \cb2 //    std::cerr << std::string(20,'-') << std::endl;
\f0\i0 \cf0 \cb2 \
\

\f1 \cf3 \cb2     \cf10 \cb2 std\cf3 \cb2 ::\cf10 \cb2 cerr\cf3 \cb2  << \cf9 \cb2 "All Tests Passed."\cf3 \cb2  << \cf10 \cb2 std\cf3 \cb2 ::\cf11 \cb2 endl\cf3 \cb2 ;
\f0 \cf0 \cb2 \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 \cb2 \
}